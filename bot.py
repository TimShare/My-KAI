import telebot
from telebot import types
from weather import my_weather
from m_schedule import _schedule
from generate_table import schedule_day_img
from io import BytesIO
import sqlite3
import schedule

# –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
telebot_token = "7182476955:AAE6eNJpU_Mj-cBmPf3JkmltvJqmXYDacSg"
bot = telebot.TeleBot(telebot_token)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
con = sqlite3.connect("new-bd.db", check_same_thread=False)
cursor = con.cursor()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def update_bot():
    a = cursor.execute("""SELECT user_id FROM user_group""").fetchall()
    user_id_list = list(map(lambda x: x[0], a))
    # for id in user_id_list:
    #     bot.send_message(id, "–ë–æ—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '/start'")



update_bot()


def daily_schedule():
    pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def url(message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup_start = types.ReplyKeyboardMarkup(resize_keyboard=True)
    weather_btn = types.KeyboardButton(text='üå§Ô∏è–ü–æ–≥–æ–¥–∞')
    schedule_btn = types.KeyboardButton(text='üìÜ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    group_btn = types.KeyboardButton(text='üë•–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã')
    markup_start.add(weather_btn, schedule_btn, group_btn)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    info = cursor.execute('SELECT * FROM user_group WHERE user_id=?', (message.from_user.id,))
    if info.fetchone() is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        bot.send_message(message.from_user.id,
                         "–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–º–æ—â–∏ –º–Ω–µ –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä —Ç–≤–æ–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ –ö–ê–ò.\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –Ω–∞–∏–ª—É—á—à—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
                         "–°–ø–∞—Å–∏–±–æ! üéì", reply_markup=markup_start)
        bot.register_next_step_handler(message, get_num_group)
    else:
        bot.send_message(message.from_user.id, "–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üå§Ô∏è–ü–æ–≥–æ–¥–∞':
        weather = my_weather()
        bot.send_message(message.from_user.id, text=weather.formated_print())

    if message.text == 'üìÜ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        days_keyboard = types.InlineKeyboardMarkup()
        pon_button = types.InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day_pon")
        vt_button = types.InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day_vt")
        sr_button = types.InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="day_sr")
        ch_button = types.InlineKeyboardButton(text="–ß–µ—Ä—Ç–≤–µ—Ä–≥", callback_data="day_ch")
        pt_button = types.InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day_pt")
        sub_button = types.InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="day_sub")
        days_keyboard.add(pon_button, vt_button, sr_button, ch_button, pt_button, sub_button)

        if cursor.execute("""SELECT num_group FROM user_group where user_id = ?""",
                          (message.from_user.id,)).fetchone()[0] != "-":
            bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=days_keyboard)
        else:
            bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
            bot.register_next_step_handler(message, get_variable_num_group)
    if message.text == "üë•–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã":
        bot.send_message(message.from_user.id,
                         "üîÑ –ö–æ–Ω–µ—á–Ω–æ! –ï—Å–ª–∏ —É —Ç–µ–±—è –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
        bot.register_next_step_handler(message, get_num_group)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –æ–Ω –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω
def get_variable_num_group(message: types.Message):
    if _schedule(message.text).is_group_schedule():
        cursor.execute("""UPDATE user_group SET num_group = ? WHERE user_id = ?""",
                       (message.text, message.from_user.id))
        con.commit()
        days_keyboard = types.InlineKeyboardMarkup()
        pon_button = types.InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day_pon")
        vt_button = types.InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day_vt")
        sr_button = types.InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="day_sr")
        ch_button = types.InlineKeyboardButton(text="–ß–µ—Ä—Ç–≤–µ—Ä–≥", callback_data="day_ch")
        pt_button = types.InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day_pt")
        sub_button = types.InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="day_sub")
        days_keyboard.add(pon_button, vt_button, sr_button, ch_button, pt_button, sub_button)

        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=days_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def get_num_group(message: types.Message):
    if message.text != "-":
        if not _schedule(message.text).get_groupid():
            bot.send_message(message.from_user.id,
                             "‚ö†Ô∏è –û–π! –ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.send_message(message.from_user.id,
                             'ü§ñ –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "-"')
            bot.register_next_step_handler(message, get_num_group)
        else:
            bot.send_message(message.from_user.id,
                             "üåü –û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –¢–≤–æ—è —É—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞.")

            info = cursor.execute('SELECT * FROM user_group WHERE user_id=?', (message.from_user.id,))
            if info.fetchone() is None:
                inf = (message.from_user.id, message.text, "stable")
                cursor.execute("INSERT INTO user_group (user_id, num_group, group_status) VALUES (?, ?, ?)", inf)
                con.commit()
            else:
                cursor.execute("""UPDATE user_group SET num_group = ? WHERE user_id = ?""",
                               (message.text, message.from_user.id))
                cursor.execute("""UPDATE user_group SET group_status = ? WHERE user_id = ?""",
                               ("stable", message.from_user.id))
                con.commit()
    else:
        bot.send_message(message.from_user.id,
                         "üëå –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º! –ï—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –∑–∞—Ö–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è.")
        info = cursor.execute('SELECT * FROM user_group WHERE user_id=?', (message.from_user.id,))
        if info.fetchone() is None:
            inf = (message.from_user.id, message.text, "variable")
            cursor.execute("INSERT INTO user_group (user_id, num_group, group_status) VALUES (?, ?, ?)", inf)
            con.commit()
        else:
            cursor.execute("""UPDATE user_group SET num_group = ? WHERE user_id = ?""",
                           (message.text, message.from_user.id))
            cursor.execute("""UPDATE user_group SET group_status = ? WHERE user_id = ?""",
                           ("variable", message.from_user.id))
            con.commit()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data in ["day_pon", "day_vt", "day_sr", "day_ch", "day_pt", "day_sub"]:
            group = (cursor.execute("""SELECT num_group FROM user_group where user_id = ?""",
                                    (call.from_user.id,)).fetchone())[0]
            print(group)
            if _schedule(group).is_group_schedule():
                days = {"day_pon": 1, "day_vt": 2, "day_sr": 3, "day_ch": 4, "day_pt": 5, "day_sub": 6}
                day = days[call.data]
                table = schedule_day_img(day=day, group=group)
                img = table.create_table_schedule()
                bio = BytesIO()
                bio.name = 'image.jpeg'
                img.save(bio, 'JPEG')
                bio.seek(0)
                bot.send_photo(call.message.chat.id, photo=bio)
                if (cursor.execute("""SELECT group_status FROM user_group where user_id = ?""",
                                   (call.from_user.id,)).fetchone())[0] == "variable":
                    cursor.execute("""UPDATE user_group SET num_group = ? WHERE user_id = ?""",
                                   ("-", call.from_user.id))
                    con.commit()
            else:
                bot.send_message(call.from_user.id, "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç")

    elif call.inline_message_id:
        if call.data == "test":
            bot.edit_message_text(inline_message_id=call.inline_message_id, text="–ë–¥—ã—â—å")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ë–î
def call_table_without_bd(call, group):
    if call.message:
        if call.data in ["day_pon", "day_vt", "day_sr", "day_ch", "day_pt", "day_sub"]:
            days = {"day_pon": 1, "day_vt": 2, "day_sr": 3, "day_ch": 4, "day_pt": 5, "day_sub": 6}
            day = days[call.data]
            table = schedule_day_img(day=day, group=group)
            img = table.create_table_schedule()
            bio = BytesIO()
            bio.name = 'image.jpeg'
            img.save(bio, 'JPEG')
            bio.seek(0)
            bot.send_photo(call.message.chat.id, photo=bio)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)
